##################################################################
#              Docker Compose file that starts Kong              #
##################################################################

version: '2.1'
networks:
  container_services_networks:
    driver: bridge
services:
  # Load Balancing
  consul:
    image: progrium/consul:latest
    command: -server -bootstrap -ui-dir /ui
    restart: always
    mem_limit: 128m
    ports:
      - 8500:8500
    expose:
      - 53
      - 8300
      - 8301
      - 8302
      - 8400
      - 8500
    dns:
      - 127.0.0.1
    networks:
      - container_services_networks
#  nginx-lb:
#    build: nginx/
#    mem_limit: 128m
#    ports:
#      - 8100:8000
#      - 8443:8443
#      - 8001:8001
#    expose:
#      - 8100
#      - 8443
#      - 8001
#    links:
#      - consul:consul
#    restart: always
#    command: >
#        /bin/containerpilot
#        -config file:///etc/containerpilot/containerpilot.json
#        nginx -g "daemon off;"
#    networks:
#      - container_services_networks

  # Kong Database

  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    depends_on:
      kong-db:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kong-db
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
    links:
      - kong-db:kong-db
    networks:
      - container_services_networks

  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    depends_on:
      kong-db:
        condition: service_healthy
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_CASSANDRA_CONTACT_POINTS: kong-db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kong-db
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
    links:
      - kong-db:kong-db
    ports:
      - "8000:8000/tcp"
      - "8001:8001/tcp"
      - "8443:8443/tcp"
      - "8444:8444/tcp"
    restart: on-failure
    networks:
      - container_services_networks

  kong-db:
    image: postgres:9.5
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    volumes:
      - /private/var/docker/postgresql/kong_db:/var/lib/postgresql
    networks:
      - container_services_networks

  dynamodb:
    image: cnadiminti/dynamodb-local
    ports:
      - 8003:8000
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: ${HOST_IP}
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_CREATE_TOPICS: "df-customer-bi:1:1,df-customer-errors:1:1,df-customer:1:1,df-customer-client-errors:1:1,df-customer-der:1:1"
      KAFKA_ZOOKEEPER_CONNECT: ${HOST_IP}:2181
    depends_on:
      - zookeeper

  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest
    ports:
      - "8082:8082"
    environment:
      - KAFKA_REST_HOST_NAME=kafka-rest-proxy
      - KAFKA_REST_ZOOKEEPER_CONNECT=zookeeper:2181

  kafka-topics-ui:
    image: landoop/kafka-topics-ui
    ports:
      - "8200:8000"
    environment:
      #- KAFKA_REST_PROXY_URL=http://localhost:8082
      - KAFKA_REST_PROXY_URL=http://kafka-rest-proxy:8082
      - PROXY=true