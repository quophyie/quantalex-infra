##################################################################
#              Docker Compose file that starts Kong              #
##################################################################

version: '2'
networks:
  container_services_networks:
    driver: bridge
services:
  # Load Balancing
  consul:
    image: progrium/consul:latest
    command: -server -bootstrap -ui-dir /ui
    restart: always
    mem_limit: 128m
    ports:
      - 8500:8500
    expose:
      - 53
      - 8300
      - 8301
      - 8302
      - 8400
      - 8500
    dns:
      - 127.0.0.1
    networks:
      - container_services_networks
  nginx-lb:
    build: nginx/
    mem_limit: 128m
    ports:
      - 8100:8000
      - 8443:8443
      - 8001:8001
    expose:
      - 8100
      - 8443
      - 8001
    links:
      - consul:consul
    restart: always
    command: >
        /bin/containerpilot
        -config file:///etc/containerpilot/containerpilot.json
        nginx -g "daemon off;"
    networks:
      - container_services_networks

  # Kong Database

  kong-database:
    image: postgres:9.4
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
    expose:
      - 5432
    volumes:
      - /private/var/docker/postgresql/kong:/var/lib/postgresql/data
    networks:
      - container_services_networks

  #kong-database:
  #  image: cassandra:2.2
  #  restart: always
  #  ports:
  #    - 9042

  kong:
    build: kong/
    restart: always
    links:
      - kong-database:kong-database
      - consul
    ports:
      - 8000
      - 8443
      - 8001
    expose:
      - 7946
      - 7946/udp
    environment:
      #- KONG_CASSANDRA_CONTACT_POINTS=kong-database
      #- KONG_DATABASE=cassandra
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
    #volumes:
    #  - /private/var/docker/nginx/kong:/var/lib/postgresql
    networks:
      - container_services_networks

  dynamodb:
    image: cnadiminti/dynamodb-local
    ports:
      - 8000:8000
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: ${HOST_IP}
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_CREATE_TOPICS: "df-customer-bi:1:1,df-customer-errors:1:1,df-customer:1:1,df-customer-client-errors:1:1,df-customer-der:1:1"
      KAFKA_ZOOKEEPER_CONNECT: ${HOST_IP}:2181
    depends_on:
      - zookeeper

  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest
    ports:
      - "8082:8082"
    environment:
      - KAFKA_REST_HOST_NAME=kafka-rest-proxy
      - KAFKA_REST_ZOOKEEPER_CONNECT=zookeeper:2181

  kafka-topics-ui:
    image: landoop/kafka-topics-ui
    ports:
      - "8200:8000"
    environment:
      #- KAFKA_REST_PROXY_URL=http://localhost:8082
      - KAFKA_REST_PROXY_URL=http://kafka-rest-proxy:8082
      - PROXY=true

