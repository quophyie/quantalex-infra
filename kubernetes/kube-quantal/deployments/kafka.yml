apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka-broker
  name: kafka-svc-internal
  namespace: quantal-dev
spec:
  ports:
    - name: kafka-broker-internal
      port: 9092
  selector:
    app: kafka-broker

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka-broker-port-external-svc
  name: kafka-node-port-external-svc
  namespace: quantal-dev
spec:
  type: NodePort
  ports:
    - name: kafka-broker-external-node-port
      port: 9092
      nodePort: 30003
      protocol: TCP
      targetPort: 30003
  selector:
    app: kafka-broker

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka-broker-node-port-external-ip-svc
  name: kafka-broker-node-port-external-ip-svc
  namespace: quantal-dev
spec:
  type: NodePort
  ports:
    - name: kafka-broker-external-ip-node-port
      port: 9092
      nodePort: 30010
      protocol: TCP
      targetPort: 30010
  selector:
    app: kafka-broker
---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kafka-broker
  name: kafka-broker
  namespace: quantal-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-broker
  template:
    metadata:
      labels:
        app: kafka-broker
    spec:
      hostname: kafka-broker
      containers:
      - name: kafka-broker

        env:
          - name: KAFKA_BROKER_ID
            value: "1"
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: zookeeper-svc.quantal-dev:2181
          - name: KAFKA_LISTENERS
            value: EXTERNAL://:30003,EXTERNAL_IP://:30010,INTERNAL://:9092
          - name: KAFKA_ADVERTISED_LISTENERS
            value: "EXTERNAL://ubuntu2204.homelan.com:30003,EXTERNAL_IP://192.168.0.170:30010,INTERNAL://kafka-svc-internal.quantal-dev:9092"
          - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
            value: "EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL_IP:PLAINTEXT"
          - name: KAFKA_INTER_BROKER_LISTENER_NAME
            value: "INTERNAL"
          - name: KAFKA_LOG_DIRS
            value: "/var/lib/kafka/data"
          - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
            value: "1"
          # For confluentinc/cp-kafka to auto create topics
          - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
            value: "true"
          # For wurstmeister/kafka to auto create topics
          - name: KAFKA_CREATE_TOPICS
            value: "car-garage-users:2:1,car-garage-vehicles:2:1"

        #image: wurstmeister/kafka
        image: confluentinc/cp-kafka:7.3.3
        #image: quophyie/cp-kafka:7.3.3
        imagePullPolicy: IfNotPresent
        command: [ "/bin/bash", "-c" ]
        args:
          -  if [ -f "/var/lib/kafka/data/meta.properties" ]; then
                echo "Found /var/lib/kafka/data/meta.properties !!" &&
                cat /var/lib/kafka/data/meta.properties &&
                rm -vf /var/lib/kafka/data/meta.properties ;
              else
                echo "meta.properties NOT FOUND!";
              fi
            
              echo /usr/bin/start-kafka.sh;
              /etc/confluent/docker/run
              & pid=$!          
              && wait ${pid}
        ports:
        - containerPort: 9092
        volumeMounts:
          - name: kafka-logs-volume
            mountPath: "/kafka/kafka-logs"
          - name: kafka-data-volume
            mountPath: "/var/lib/kafka/data"
        resources:
          requests:
            memory: "1024Mi"
          limits:
            memory: "1024Mi"
      volumes:
        - name: kafka-logs-volume
          persistentVolumeClaim:
            claimName: kafka-logs-local-path-pvc
        - name: kafka-data-volume
          persistentVolumeClaim:
            claimName: kafka-data-local-path-pvc

